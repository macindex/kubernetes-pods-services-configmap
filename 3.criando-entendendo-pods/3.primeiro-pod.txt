Aqui nós vamos criar o nosso primeiro pod. Nós estamos utilizando o Docker Desktop aqui no Windows com o nosso cluster Kubernetes, mas caso você esteja utilizando o Linux ou Google Cloud Plataform, ou qualquer outro Cloud Provider que você queira, vai dar o mesmo resultado: nós vamos criar um pod.
E para nós criarmos eu falei para vocês que o Kubernetes, o kubectl, é capaz de fazer operações de criar, ler, atualizar e remover os recursos de dentro do nosso cluster, se comunicando com a API.
O comando kubectl run no PowerShell é capaz de criar um pod para nós. Os parâmetros que nós vamos informar são bem simples: o primeiro vai ser o nome do pod que nós queremos criar.
Então eu vou criar um pod utilizando a imagem do nginx, então eu vou chamar ele de nginx-pod e a partir daí eu posso e devo explicitar qual imagem eu quero utilizar para basear o container que será criado dentro desse pod. Então uso a flag --image e informo com = que eu quero utilizar o nginx, por exemplo na versão latest. Então --image=nginx:latest.
Se eu apertar a tecla “Enter”, olhe o que vai acontecer: ele falou que criou. Será que criou? Vamos ver aqui com o comando kubectl get pods. Está aqui o nosso pod chamado nginx-pod, ainda não está pronto e está com status de criação.
Se nós executarmos esse mesmo comando kubectl get pods e utilizarmos a flag --watch, ele vai passar a acompanhar esse comando em tempo real. Então assim que tiver uma mudança no status desse comando, ele vai nos atualizar. Isso significa que assim que o nosso pod for criado, como ele acabou de ser, ele nos atualiza automaticamente. Olhe que legal!
Então nós podemos apertar as teclas “Ctrl + C” para sairmos desse comando e o nosso pod já está em execução, nós podemos ver outras informações também sobre ele, com o comando kubectl describe. E eu quero descrever esse meu pod chamado nginx-pod. Nós apertamos a tecla “Enter” e ele vai exibir diversas informações.
kubectl describe pod nginx-podCopiar código
Inclusive, no final nós conseguimos ver como foi o processo de criação desse pod. Primeiro ele atribuiu este pod a um nó chamado Docker Desktop, no caso do Linux vai instalar o Minikube e quem fez isso foi o “Scheduled”. Olhe que legal! Como é importante nós sabermos essa questão arquitetural do Kubernetes!
A partir daí ele começou a fazer o download da imagem. Baixou ela com sucesso, criou o container e iniciou o pod. Então repare: o pod só foi iniciado depois da criação do container que vai compor esse pod.
Nós podemos também ter outras informações, como por exemplo: o IP dele, esses labels e essas etiquetas que nós vamos entender do que que se tratam, pois elas são bem importantes e poderosas. Nós vamos entender bastante sobre elas no decorrer do curso, além de o nome dele e informações bem básicas sobre o nosso pod.
Se, digamos, eu estou usando a versão nginx:latest, digamos que eu queira mudar a versão do nginx que estou utilizando nesse pod. Eu quero atualizar esse pod já existente.
Eu tenho o comando kubectl edit e eu posso editar o quê? Um pod e qual é o pod que eu quero editar? Esse chamado nginx-pod, e ele vai abrir esse bloco de notas na nossa frente com diversas informações bem complexas.
Mas o que importa para nós? Nós vamos aceitar isso por enquanto, porque nós estamos trabalhando de maneira bem ingênua. Nós queremos atualizar a imagem do nosso pod, que se nós analisarmos bem, está logo embaixo com o nosso image. Nós não queremos utilizar a versão latest, nós queremos utilizar a versão 1.0.
Nós salvamos o arquivo, fechamos e ele vai falar que o nosso pod foi editado. Se nós vermos aqui de novo o nosso comando kubectl get pods, olhw o que vai acontecer: ele está agora com status de 0/1, de Ready, e deu erro de imagem para baixar.
O que isso quer dizer? Vamos descobrir o que isso quer dizer utilizando aqui o nosso comando kubectl describe pod e vamos passar aqui o nosso nginx-pod.
Se nós vermos aqui em baixo sem nenhum problema, olhe o que aconteceu - ele começou a tentar baixar essa imagem da versão 1.0 do nginx e não conseguiu. Por quê? Porque essa imagem não existe, então ele caiu meio que em um looping, no fim das contas de ficar tentando baixar essa imagem e não conseguir.
Por isso que se nós viermos aqui agora de novo, no status, nós estamos com esse ImagePullBackOff, porque ele não conseguiu fazer o download dessa imagem para a criação do nosso pod.
E foi um pouco complexo porque nós fizemos isso de maneira ingênua, nós criamos esse pod de maneira imperativa e nós tentamos editar ele também de maneira imperativa. Nós fizemos essa edição, na verdade, de maneira imperativa.
Só que, qual é o problema da maneira imperativa? Nós acabamos não tendo meio que o acompanhamento de como tudo está acontecendo dentro do nosso cluster, nós não temos nada muito bem declarado e definido. Nós precisamos ter um histórico de quais comandos nós realizamos para saber qual é o nosso estado atual.
Para evitarmos esse tipo de problema e deixarmos tudo muito mais claro e organizado no nosso cluster, nós vamos passar a trabalhar com maneira declarativa, onde no próximo vídeo nós vamos criar um arquivo declarativo - um arquivo de definição para definir como é o pod que nós queremos criar.
Mas isso nós vamos fazer no próximo vídeo e eu vejo vocês lá! Até mais!